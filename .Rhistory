prop <- nsub*100/npop
if (int & (nsub == 0 | prop < cutoff)){
pval <- 1
hr <- 1
} else if (NROW(sub) == 0 | NROW(sub2) == 0) {
pval <- 1
hr <- 1
} else {
try1 <- try(coxph(as.formula(sprintf("Surv(%s, %s) ~ newtreat",time,status)), data = sub))
try2 <- try(coxph(as.formula(sprintf("Surv(%s, %s) ~ newtreat",time,status)), data = sub2))
try3 <- try(summary(coxph(as.formula(sprintf("Surv(%s, %s) ~ newtreat",time,status)), data = sub)),T)
try4 <- try(summary(coxph(as.formula(sprintf("Surv(%s, %s) ~ newtreat",time,status)), data = sub2)),T)
if (!int & (inherits(try1,"try-error") | inherits(try3,"try-error") )){
pval <- 1;hr <- 1
} else if (int & any(inherits(try1,"try-error"),inherits(try2,"try-error"),inherits(try3,"try-error"),inherits(try4,"try-error"))){
pval <- 1;hr <- 1
} else {
coxfit1 <- coxph(as.formula(sprintf("Surv(%s, %s) ~ newtreat",time,status)), data = sub)
coxfit2 <- coxph(as.formula(sprintf("Surv(%s, %s) ~ newtreat",time,status)), data = sub2)
sum <- summary(coxfit1)
sum2 <- summary(coxfit2)
zval <- sum$coefficients[4]
zval2 <- sum2$coefficients[4]
if (!is.na(zval)) {
zval.lr <- sqrt(sum$sctest[1])*(-1)^(!zval>0)
pval <- pnorm(zval.lr, lower.tail = F)
} else pval <- 1
if (!is.na(zval2)) {
zval.lr2 <- sqrt(sum2$sctest[1])*(-1)^(!zval2>0)
pval2 <- pnorm(zval.lr2, lower.tail = F)
} else pval2 <- 1
hr <- sum$conf.int[2]
if (int & pval2 < pval) {pval <- 1;hr<-1}
}
}
return(c(pval=pval,diff=hr,sub.size=nsub,sub.proption=prop,sub.treat=NROW(sub.treat),
sub.control=NROW(sub.control)))
})
objv2 <- do.call(rbind,objv)
return(list(objv=objv2[,1],diff=objv2[,2],sub.size=objv2[,3],sub.proption=sprintf("%s%%",objv2[,4]),sub.treat=objv2[,5],
sub.control=objv2[,6]))
}
## Caculate the objective value and estimated treatment effect (that is the HR caculated through the cox model)
## of subgroup in training data
## Objective value is calculated via: 2(1-Phi(|Z+ - Z-|/2^0.5)), where Phi is the CDF of standard normal distribution and
## Z+, Z- are the test statistics for testing the one-sided hypothesis of treatment efficacy in subgroup positive and
## negative population respectively.
objF.logrank2 <- function(subgroups,data,cutoff=10,trt="treat==1",ctrl="treat==2",status="e.rfs",time="t.rfs"){
require(survival)
trtvar <- strsplit(trt,"=")[[1]][1]
trtval <- strsplit(trt,"=")[[1]][2]
ctrlval <- strsplit(ctrl,"=")[[1]][2]
data$newtreat <- factor(data[,trtvar],levels = c(trtval, ctrlval))
npop <- NROW(data)
objv <- lapply(subgroups,function(xx){
if (xx != "no subgroup") {
sub <- subset(data, eval(parse(text = get("xx"))))
sub2 <- subset(data, !eval(parse(text = get("xx")))) #the complementory set
} else {sub <- data; sub2 <- data}
sub.treat <- subset(sub,eval(parse(text = sprintf("%s == %s",trtvar,trtval))))
sub.control <- subset(sub,eval(parse(text = sprintf("%s == %s",trtvar,ctrlval))))
nsub <- 2*min(NROW(sub.treat),NROW(sub.control))
prop <- nsub*100/npop
if (nsub == 0 | prop < cutoff){
pval <- 1
hr <- 1
} else if (NROW(sub) == 0 | NROW(sub2) == 0) {
pval <- 1
hr <- 1
} else {
try1 <- try(coxph(as.formula(sprintf("Surv(%s, %s) ~ newtreat",time,status)), data = sub))
try2 <- try(coxph(as.formula(sprintf("Surv(%s, %s) ~ newtreat",time,status)), data = sub2))
try3 <- try(summary(coxph(as.formula(sprintf("Surv(%s, %s) ~ newtreat",time,status)), data = sub)),T)
try4 <- try(summary(coxph(as.formula(sprintf("Surv(%s, %s) ~ newtreat",time,status)), data = sub2)),T)
if (any(inherits(try1,"try-error"),inherits(try2,"try-error"),inherits(try3,"try-error"),inherits(try4,"try-error"))){
pval <- 1;hr <- 1
} else {
coxfit1 <- coxph(as.formula(sprintf("Surv(%s, %s) ~ newtreat",time,status)), data = sub)
coxfit2 <- coxph(as.formula(sprintf("Surv(%s, %s) ~ newtreat",time,status)), data = sub2)
sum <- summary(coxfit1)
sum2 <- summary(coxfit2)
zval <- sum$coefficients[4]
zval2 <- sum2$coefficients[4]
if(is.na(zval) | is.na(zval2))
pval <- 1
else {
zval.lr <- sqrt(sum$sctest[1])*(-1)^(!zval>0)
zval.lr2 <- sqrt(sum2$sctest[1])*(-1)^(!zval2>0)
pval <- 1 - pnorm((zval.lr - zval.lr2)/sqrt(2))
}
hr <- sum$conf.int[2]
}
}
return(c(pval=pval,diff=hr,sub.size=nsub,sub.proption=prop,sub.treat=NROW(sub.treat),
sub.control=NROW(sub.control)))
})
objv2 <- do.call(rbind,objv)
return(list(objv=objv2[,1],diff=objv2[,2],sub.size=objv2[,3],sub.proption=sprintf("%s%%",objv2[,4]),sub.treat=objv2[,5],
sub.control=objv2[,6]))
}
cv.list <- lapply(1:n.folds,function(i){
data.train <- data.cv[!idx==i,]
data.test <- data.cv[idx==i,]
methodargslist$data_set_parameters$data_set <- data.train
methodargslist$algorithm_parameters$min_subgroup_size <- floor(nrow(data.train)*0.1)
methodargslist$algorithm_parameters$random_seed <- seed+i
res <- SIDES(methodargslist)
sub <- get_top_subgroup(res,1)
if (is.null(sub))
SIDES.sub <- "no subgroup"
else SIDES.sub <- paste(sprintf("(%s)",unlist(strsplit(sub,";"))),collapse = " & ")
trainobjv <- objF.logrank(subgroups=SIDES.sub,
data=data.train,
trt = SIDES.trt,
ctrl = SIDES.ctrl,status=methodargslist$data_set_parameters$outcome_censor_name,
time=methodargslist$data_set_parameters$outcome_variable_name,
cutoff=0,
int=FALSE)
testobjv <- objF.logrank(subgroups=SIDES.sub,
data=data.test,
trt = SIDES.trt,
ctrl = SIDES.ctrl,status=methodargslist$data_set_parameters$outcome_censor_name,
time=methodargslist$data_set_parameters$outcome_variable_name,
cutoff=0,
int=FALSE)
testres <- list(bestsub=SIDES.sub,trainobjv=trainobjv,testobjv=testobjv)
return(list(testres=testres))
})
cv.subs <- unlist(lapply(cv.list,function(x) x$testres$bestsub))
cv.trainp <- unlist(lapply(cv.list,function(x) x$testres$trainobjv$objv))
cv.traind <- unlist(lapply(cv.list,function(x) x$testres$trainobjv$diff))
cv.trainprop <- unlist(lapply(cv.list,function(x) x$testres$trainobjv$sub.proption))
cv.testp <- unlist(lapply(cv.list,function(x) x$testres$testobjv$objv))
cv.testd <- unlist(lapply(cv.list,function(x) x$testres$testobjv$diff))
if (outcome.type %in% c("tte","survival") ) cv.testd[cv.testd > 100 | cv.testd < 0.001] <- 1 ## reset too large HR value to 1
cv.testprop <- unlist(lapply(cv.list,function(x) x$testres$testobjv$sub.proption))
res <- data.frame(subs=cv.subs,trainp=cv.trainp,testp=cv.testp,traind=cv.traind,testd=cv.testd,trainprop=cv.trainprop,testprop=cv.testprop)
View(res)
data.train <- data.cv[!idx==3,]
data.test <- data.cv[idx==3,]
methodargslist$data_set_parameters$data_set <- data.train
methodargslist$algorithm_parameters$min_subgroup_size <- floor(nrow(data.train)*0.1)
methodargslist$algorithm_parameters$random_seed <- seed+3
res <- SIDES(methodargslist)
res
cv.list[[1]]$testres
cv.list[[3]]$testres
res
param_run1
param_run1$data_set_parameters
system.time(CSIDES_results_run1 <- SIDES(param_run1))
CSIDES_results_run1
best.signature<-get_top_subgroup(CSIDES_results_run1,1)
best.signature
biomarker_names<-colnames(er.data2)[!colnames(er.data2) %in% c("treat","t.rfs","e.rfs")]
source("C:\\Users\\dzhao\\Documents\R\\R\\PRIM.R")
source("C:\\Users\\dzhao\\Documents\\R\\PRIM.R")
library(survival)
p1 <- prim.train(data=er.data2,
yvar="t.rfs",
censorvar="e.rfs",
trtvar="treat",
trtref = 2,
xvars=biomarker_names,
type="s",
des.res = "larger",
alpha = c(0.05, 0.06, 0.07, 0.08, 0.09, 0.1, 0.2, 0.3, 0.4, 0.5),
min.sigp.prcnt = 0.1, training.percent = 0.5, n.boot = 0,
pre.filter = NULL, filter.method = NULL)
p1
biomarker_names<-colnames(er.data4)[!colnames(er.data4) %in% c("treat","t.rfs","e.rfs")]
p1 <- prim.train(data=er.data4,
yvar="t.rfs",
censorvar="e.rfs",
trtvar="treat",
trtref = 2,
xvars=biomarker_names,
type="s",
des.res = "larger",
alpha = c(0.05, 0.06, 0.07, 0.08, 0.09, 0.1, 0.2, 0.3, 0.4, 0.5),
min.sigp.prcnt = 0.1, training.percent = 0.5, n.boot = 0,
pre.filter = NULL, filter.method = NULL)
p1
p1 <- prim.train(data=er.data3,
yvar="t.rfs",
censorvar="e.rfs",
trtvar="treat",
trtref = 2,
xvars=biomarker_names,
type="s",
des.res = "larger",
alpha = c(0.05, 0.06, 0.07, 0.08, 0.09, 0.1, 0.2, 0.3, 0.4, 0.5),
min.sigp.prcnt = 0.1, training.percent = 0.5, n.boot = 0,
pre.filter = NULL, filter.method = NULL)
er.data2 <- er.data[,-1]
er.data3 <- er.data2[!apply(sapply(er.data2,is.na),1,sum),]
er.data4 <- er.data2[!is.na(er.data2$e.rfs),]
p1 <- prim.train(data=er.data4,
yvar="t.rfs",
censorvar="e.rfs",
trtvar="treat",
trtref = 2,
xvars=biomarker_names,
type="s",
des.res = "larger",
alpha = c(0.05, 0.06, 0.07, 0.08, 0.09, 0.1, 0.2, 0.3, 0.4, 0.5),
min.sigp.prcnt = 0.1, training.percent = 0.5, n.boot = 0,
pre.filter = NULL, filter.method = NULL)
p1
p1 <- prim.train(data=er.data2,
yvar="t.rfs",
censorvar="e.rfs",
trtvar="treat",
trtref = 2,
xvars=biomarker_names,
type="s",
des.res = "larger",
alpha = c(0.05, 0.06, 0.07, 0.08, 0.09, 0.1, 0.2, 0.3, 0.4, 0.5),
min.sigp.prcnt = 0.1, training.percent = 0.5, n.boot = 0,
pre.filter = NULL, filter.method = NULL)
p1 <- prim.train(data=er.data4,
yvar="t.rfs",
censorvar="e.rfs",
trtvar="treat",
trtref = 2,
xvars=biomarker_names,
type="s",
des.res = "larger",
alpha = c(0.05, 0.06, 0.07, 0.08, 0.09, 0.1, 0.2, 0.3, 0.4, 0.5),
min.sigp.prcnt = 0.1, training.percent = 0.5, n.boot = 0,
pre.filter = NULL, filter.method = NULL)
p1
lapply(p1,paste)
class(p1)
sapply(p1,paste)
lapply(p1,paste0)
lapply(p1,paste,collapse=" ")
apply(p1,1,paste,collapse=" ")
p1
paste(apply(p1,1,paste,collapse=" "),collapse = "&")
paste(apply(p1,1,paste,collapse=" "),collapse = " & ")
paste(sprintf("(%s)",apply(p1,1,paste,collapse=" ")),collapse = " & ")
primargs <- list(data=er.data4,
yvar="t.rfs",
censorvar="e.rfs",
trtvar="treat",
trtref = 2,
xvars=biomarker_names,
type="s",
des.res = "larger",
alpha = c(0.05, 0.06, 0.07, 0.08, 0.09, 0.1, 0.2, 0.3, 0.4, 0.5),
min.sigp.prcnt = 0.1, training.percent = 0.5, n.boot = 0,
pre.filter = NULL, filter.method = NULL)
p1 <- do.call("prim.train",primargs)
paste(sprintf("(%s)",apply(p1,1,paste,collapse=" ")),collapse = " & ")
data.cv=er.data4;method="PRIM";methodargslist=primargs;n.folds=3;seed=123;
method = match.arg(method)
methodargslist$data <- str2lang("data.train")
if(is.null(data.cv)) stop("data.cv cannot be null")
n <- NROW(data.cv)
idx_fix <- rep_len(1:n.folds,n)
set.seed(seed)
idx <- sample(idx_fix)
outcome.type <- methodargslist$type
outcome.type
methodargslist$trtvar
methodargslist$trtref
PRIM.trt <- sprintf("%s=%s",methodargslist$trtvar,
unique(data.cv[,methodargslist$trtvar])[unique(data.cv[,methodargslist$trtvar]) != methodargslist$trtref])
PRIM.ctrl <- sprintf("%s=%s",methodargslist$trtvar,methodargslist$trtref)
PRIM.trt
PRIM.ctrl
prim.train()
prim.train
cv.list <- lapply(1:n.folds,function(i){
data.train <- data.cv[!idx==i,]
data.test <- data.cv[idx==i,]
methodargslist$data <- data.train
res <- do.call("PRIM",methodargslist)
sub <- paste(sprintf("(%s)",apply(res,1,paste,collapse=" ")),collapse = " & ")
if (is.null(sub))
PRIM.sub <- "no subgroup"
else PRIM.sub <- sub
trainobjv <- objF.logrank(subgroups=PRIM.sub,
data=data.train,
trt = PRIM.trt,
ctrl = PRIM.ctrl,status=methodargslist$censorvar,
time=methodargslist$yvar,
cutoff=0,
int=FALSE)
testobjv <- objF.logrank(subgroups=PRIM.sub,
data=data.test,
trt = PRIM.trt,
ctrl = PRIM.ctrl,status=methodargslist$censorvar,
time=methodargslist$yvar,
cutoff=0,
int=FALSE)
testres <- list(bestsub=PRIM.sub,trainobjv=trainobjv,testobjv=testobjv)
return(list(testres=testres))
})
cv.list <- lapply(1:n.folds,function(i){
data.train <- data.cv[!idx==i,]
data.test <- data.cv[idx==i,]
methodargslist$data <- data.train
res <- do.call("prim.train",methodargslist)
sub <- paste(sprintf("(%s)",apply(res,1,paste,collapse=" ")),collapse = " & ")
if (is.null(sub))
PRIM.sub <- "no subgroup"
else PRIM.sub <- sub
trainobjv <- objF.logrank(subgroups=PRIM.sub,
data=data.train,
trt = PRIM.trt,
ctrl = PRIM.ctrl,status=methodargslist$censorvar,
time=methodargslist$yvar,
cutoff=0,
int=FALSE)
testobjv <- objF.logrank(subgroups=PRIM.sub,
data=data.test,
trt = PRIM.trt,
ctrl = PRIM.ctrl,status=methodargslist$censorvar,
time=methodargslist$yvar,
cutoff=0,
int=FALSE)
testres <- list(bestsub=PRIM.sub,trainobjv=trainobjv,testobjv=testobjv)
return(list(testres=testres))
})
1:NA
one.pasting = function (d.inside, d.outside, trace.inside.condition, alpha, yvar, censorvar, trtvar, g.str, l.str, type, des.res) {
n.obs.inside = dim(d.inside)[1]
n.obs.outside = dim(d.outside)[1]
n.obs.to.add = ceiling(n.obs.inside * alpha)
one.pasting.results = data.frame(x.nm=as.character(), condition=as.character(), cutoff=as.numeric(), pv1=as.numeric(),
pv2=as.numeric(), coef1=as.numeric(), coef2=as.numeric(),end.flag=as.logical(),stringsAsFactors=F);
pidx.pasting.results = 1;
num.x.pasting=dim(trace.inside.condition)[1]
for (i in 1:num.x.pasting){
relax.condition=trace.inside.condition[i,]
x.nm.relax.condition=relax.condition[,"x.nm"]
other.condition=trace.inside.condition[-i,]
idx.outside.by.other.condition=query.from.condition(d.outside, other.condition, g.str, l.str)
d.outside.by.other.condition=d.outside[idx.outside.by.other.condition,]
if(dim(d.outside.by.other.condition)[1] == 0) next
if (relax.condition[,"condition"]==g.str){
d.outside.by.other.condition.order = order(d.outside.by.other.condition[,x.nm.relax.condition],decreasing=T)
d.outside.by.other.condition.ordered = d.outside.by.other.condition[d.outside.by.other.condition.order,]
x.cutoff.relax.condition = d.outside.by.other.condition.ordered[,x.nm.relax.condition][min(n.obs.to.add,dim(d.outside.by.other.condition.ordered)[1])]
n.obs.actually.add = sum(d.outside.by.other.condition.ordered[,x.nm.relax.condition]>= x.cutoff.relax.condition,na.rm = T)
end.flag = n.obs.actually.add>=dim(d.outside.by.other.condition.ordered)[1]
d.inside.extended=rbind(d.inside, d.outside.by.other.condition.ordered[1:n.obs.actually.add,])
d.outside.shrinked=rbind(d.outside[!idx.outside.by.other.condition,],d.outside.by.other.condition.ordered[-(1:n.obs.actually.add),])
paste.x.extended.cutoff = d.outside.by.other.condition.ordered[n.obs.actually.add,x.nm.relax.condition]
cutoff.inside.condition.str = g.str;
}
if (relax.condition[,"condition"]==l.str){
d.outside.by.other.condition.order = order(d.outside.by.other.condition[,x.nm.relax.condition],decreasing=F)
d.outside.by.other.condition.ordered = d.outside.by.other.condition[d.outside.by.other.condition.order,]
x.cutoff.relax.condition = d.outside.by.other.condition.ordered[,x.nm.relax.condition][min(n.obs.to.add,dim(d.outside.by.other.condition.ordered)[1])]
n.obs.actually.add = sum(d.outside.by.other.condition.ordered[,x.nm.relax.condition]<= x.cutoff.relax.condition,na.rm = T)
end.flag = n.obs.actually.add>=dim(d.outside.by.other.condition.ordered)[1]
d.inside.extended=rbind(d.inside, d.outside.by.other.condition.ordered[1:n.obs.actually.add,])
d.outside.shrinked=rbind(d.outside[!idx.outside.by.other.condition,],d.outside.by.other.condition.ordered[-(1:n.obs.actually.add),])
paste.x.extended.cutoff = d.outside.by.other.condition.ordered[n.obs.actually.add,x.nm.relax.condition]
cutoff.inside.condition.str = l.str;
}
res1 = try(pval.cal(d.inside.extended, yvar=yvar, censorvar=censorvar, trtvar=trtvar, type=type, des.res=des.res), silent=T)
res2 = try(pval.cal(d.outside.shrinked, yvar=yvar, censorvar=censorvar, trtvar=trtvar, type=type, des.res=des.res), silent=T)
# skip collecting result if not comparable
if(is.na(res1$pv) || is.na(res2$pv)||class(res1)=="try-error"||class(res2)=="try-error") next
# save the result of pasting of x on its one side
one.pasting.results[pidx.pasting.results, "x.nm"] = x.nm.relax.condition
one.pasting.results[pidx.pasting.results, "condition"] = cutoff.inside.condition.str
one.pasting.results[pidx.pasting.results, "cutoff"] = paste.x.extended.cutoff;
one.pasting.results[pidx.pasting.results, "pv1"] = res1$pv
one.pasting.results[pidx.pasting.results, "pv2"] = res2$pv
one.pasting.results[pidx.pasting.results, "coef1"] = res1$coef.trt
one.pasting.results[pidx.pasting.results, "coef2"] = res2$coef.trt
one.pasting.results[pidx.pasting.results, "end.flag"] = end.flag
pidx.pasting.results = pidx.pasting.results + 1;
}
if (dim(one.pasting.results)[1]==0) return (one.pasting.results)
idx.obs.qualified=one.pasting.results$pv1<one.pasting.results$pv2
pv.current = pval.cal(d.inside, yvar=yvar, censorvar=censorvar, trtvar=trtvar, type=type,des.res=des.res)$pv
idx.obs.qualified = idx.obs.qualified & (one.pasting.results$pv1 < pv.current)
one.pasting.results=one.pasting.results[idx.obs.qualified,]
order.by.pv1 = order(one.pasting.results$pv1, decreasing=F)
one.pasting.results.ordered = one.pasting.results[order.by.pv1, ]
return(one.pasting.results.ordered)
}
cv.list <- lapply(1:n.folds,function(i){
data.train <- data.cv[!idx==i,]
data.test <- data.cv[idx==i,]
methodargslist$data <- data.train
res <- do.call("prim.train",methodargslist)
sub <- paste(sprintf("(%s)",apply(res,1,paste,collapse=" ")),collapse = " & ")
if (is.null(sub))
PRIM.sub <- "no subgroup"
else PRIM.sub <- sub
trainobjv <- objF.logrank(subgroups=PRIM.sub,
data=data.train,
trt = PRIM.trt,
ctrl = PRIM.ctrl,status=methodargslist$censorvar,
time=methodargslist$yvar,
cutoff=0,
int=FALSE)
testobjv <- objF.logrank(subgroups=PRIM.sub,
data=data.test,
trt = PRIM.trt,
ctrl = PRIM.ctrl,status=methodargslist$censorvar,
time=methodargslist$yvar,
cutoff=0,
int=FALSE)
testres <- list(bestsub=PRIM.sub,trainobjv=trainobjv,testobjv=testobjv)
return(list(testres=testres))
})
cv.subs <- unlist(lapply(cv.list,function(x) x$testres$bestsub))
cv.trainp <- unlist(lapply(cv.list,function(x) x$testres$trainobjv$objv))
cv.traind <- unlist(lapply(cv.list,function(x) x$testres$trainobjv$diff))
cv.trainprop <- unlist(lapply(cv.list,function(x) x$testres$trainobjv$sub.proption))
cv.testp <- unlist(lapply(cv.list,function(x) x$testres$testobjv$objv))
cv.testd <- unlist(lapply(cv.list,function(x) x$testres$testobjv$diff))
if (outcome.type %in% c("tte","survival","s") ) cv.testd[cv.testd > 100 | cv.testd < 0.001] <- 1 ## reset too large HR value to 1
cv.testprop <- unlist(lapply(cv.list,function(x) x$testres$testobjv$sub.proption))
res <- data.frame(subs=cv.subs,trainp=cv.trainp,testp=cv.testp,traind=cv.traind,testd=cv.testd,trainprop=cv.trainprop,testprop=cv.testprop)
View(res)
p1 <- prim.train(data=er.data3,
yvar="t.rfs",
censorvar="e.rfs",
trtvar="treat",
trtref = 2,
xvars=biomarker_names,
type="s",
des.res = "larger",
alpha = c(0.05, 0.06, 0.07, 0.08, 0.09, 0.1, 0.2, 0.3, 0.4, 0.5),
min.sigp.prcnt = 0.1, training.percent = 0.5, n.boot = 0,
pre.filter = NULL, filter.method = NULL)
paste(sprintf("(%s)",apply(p1,1,paste,collapse=" ")),collapse = " & ")
xx<-"(t.dmfs <= 3588.0) & (age <=   63.8)"
sub <- subset(er.data3, eval(parse(text = get("xx"))))
sub2 <- subset(er.data3, !eval(parse(text = get("xx"))))
a<-coxph(Surv(t.rfs, e.rfs) ~ treat, data = sub)
ares<-summary(a)
ares
p1 <- prim.train(data=er.data3,
yvar="t.rfs",
censorvar="e.rfs",
trtvar="treat",
trtref = 2,
xvars=biomarker_names,
type="s",
des.res = "smaller",
alpha = c(0.05, 0.06, 0.07, 0.08, 0.09, 0.1, 0.2, 0.3, 0.4, 0.5),
min.sigp.prcnt = 0.1, training.percent = 0.5, n.boot = 0,
pre.filter = NULL, filter.method = NULL)
paste(sprintf("(%s)",apply(p1,1,paste,collapse=" ")),collapse = " & ")
xx<-"(size >= 2.8)"
sub <- subset(er.data3, eval(parse(text = get("xx"))))
sub2 <- subset(er.data3, !eval(parse(text = get("xx"))))
a<-coxph(Surv(t.rfs, e.rfs) ~ treat, data = sub)
ares<-summary(a)
ares
primargs <- list(data=er.data4,
yvar="t.rfs",
censorvar="e.rfs",
trtvar="treat",
trtref = 2,
xvars=biomarker_names,
type="s",
des.res = "smaller",
alpha = c(0.05, 0.06, 0.07, 0.08, 0.09, 0.1, 0.2, 0.3, 0.4, 0.5),
min.sigp.prcnt = 0.1, training.percent = 0.5, n.boot = 0,
pre.filter = NULL, filter.method = NULL)
data.cv=er.data4;method="PRIM";methodargslist=primargs;n.folds=3;seed=123;
cv.list <- lapply(1:n.folds,function(i){
data.train <- data.cv[!idx==i,]
data.test <- data.cv[idx==i,]
methodargslist$data <- data.train
res <- do.call("prim.train",methodargslist)
sub <- paste(sprintf("(%s)",apply(res,1,paste,collapse=" ")),collapse = " & ")
if (is.null(sub))
PRIM.sub <- "no subgroup"
else PRIM.sub <- sub
trainobjv <- objF.logrank(subgroups=PRIM.sub,
data=data.train,
trt = PRIM.trt,
ctrl = PRIM.ctrl,status=methodargslist$censorvar,
time=methodargslist$yvar,
cutoff=0,
int=FALSE)
testobjv <- objF.logrank(subgroups=PRIM.sub,
data=data.test,
trt = PRIM.trt,
ctrl = PRIM.ctrl,status=methodargslist$censorvar,
time=methodargslist$yvar,
cutoff=0,
int=FALSE)
testres <- list(bestsub=PRIM.sub,trainobjv=trainobjv,testobjv=testobjv)
return(list(testres=testres))
})
View(res)
cv.subs <- unlist(lapply(cv.list,function(x) x$testres$bestsub))
cv.trainp <- unlist(lapply(cv.list,function(x) x$testres$trainobjv$objv))
cv.traind <- unlist(lapply(cv.list,function(x) x$testres$trainobjv$diff))
cv.trainprop <- unlist(lapply(cv.list,function(x) x$testres$trainobjv$sub.proption))
cv.testp <- unlist(lapply(cv.list,function(x) x$testres$testobjv$objv))
cv.testd <- unlist(lapply(cv.list,function(x) x$testres$testobjv$diff))
if (outcome.type %in% c("tte","survival","s") ) cv.testd[cv.testd > 100 | cv.testd < 0.001] <- 1 ## reset too large HR value to 1
cv.testprop <- unlist(lapply(cv.list,function(x) x$testres$testobjv$sub.proption))
res <- data.frame(subs=cv.subs,trainp=cv.trainp,testp=cv.testp,traind=cv.traind,testd=cv.testd,trainprop=cv.trainprop,testprop=cv.testprop)
View(res)
a<-coxph(Surv(t.rfs, e.rfs) ~ treat, data = er.data4)
ares<-summary(a)
ares
